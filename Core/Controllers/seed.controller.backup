import fs from 'fs'
import csv from 'csv-parser'
import path from 'path';
import sequelize from '../../Config/sequelize.config.js';

import Orgs from '../Models/org.model.js';
import Groups from '../Models/group.model.js';
import Users from '../Models/user.model.js';
import Stages from '../../App/Models/stage.model.js';
import Genres from '../../App/Models/genre.model.js';
import Actors from '../../App/Models/actor.model.js';
import Events from '../../App/Models/event.model.js';
import EventActorRel from '../../App/Models/event-actor-rel.model.js';
import Seats from '../../App/Models/seat.model.js';
import { log } from 'console';

/**
 * Controller for Seed Actions
 */
class SeedController {
	constructor() {
		console.log('Class Seed Controller: Running seeds');

		this.data = {}
		this.seeded = []

		this.seed_models = [
			/*
			{ name: 'groups', model: Groups, file: 'group.csv' },
			{ name: 'orgs', model: Orgs, file: 'org.csv' },
			{ name: 'users', model: Users, file: 'user.csv' },
			{ name: 'events', model: Events, file: 'event.csv' },
			{ name: 'genres', model: Genres, file: 'genre.csv' },
			{ name: 'stages', model: Stages, file: 'stage.csv' },
			{ name: 'seats', model: Seats, file: 'seat.csv' },
			{ name: 'actor', model: Actors, file: 'actor.csv' },
			{ name: 'eventactorrel', model: EventActorRel, file: 'event_actor_rel.csv', is_rel: true },
			*/
			{ name: 'stages', model: Stages, file: 'stage.csv' },
			{ name: 'genres', model: Genres, file: 'genre.csv' },
			{ name: 'actor', model: Actors, file: 'actor.csv' },
			{ name: 'events', model: Events, file: 'event.csv' },
			{ name: 'eventactorrel', model: EventActorRel, file: 'event_actor_rel.csv', is_rel: true },
		]
	} 



	seed_from_csv = async () => {
		const transaction = await sequelize.transaction();


		const arrRels = this.seed_models.filter(x => x.is_rel === true);

		for(let elm of this.seed_models) {
			if(elm.is_rel) continue
			this.get_csv_data(elm)
		}

		for(let elm of arrRels) {
			this.get_csv_data(elm)
		}

	}

	get_csv_data = elm => {
		const csvpath = path.resolve(`./Data/${elm.file}`);

		this.data[elm.name] = []

		fs.createReadStream(csvpath)
			.pipe(csv())
			.on('data', row => {
				this.data[elm.name].push(row)
			})
			.on('end', async () => {
				if(this.data[elm.name].length) {
					this.insert(this.data[elm.name], elm.model)
				}
				this.data[elm.name] = []
		});		

	}

	insert = async (data, model) => {
		const exists = await model.findByPk(data[0].id, { attributes: ['id']})

		if(!exists) {
			try {
				const result = await model.bulkCreate(data);
			} catch (error) {
				console.error('Error inserting seed data:', error);
			}
		}
	}
}

export default SeedController